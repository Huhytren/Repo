import numpy as np
import pandas as pd

def create_grouped_triangular_ema(df, id_column, columns, window):
    """
    Computes a Triangular Exponential Moving Average (TEMA) per group.

    Parameters:
    - df: pandas DataFrame with a DateTime column and an ID column.
    - id_column: column name representing the unique ID per group.
    - columns: list of column names to apply TEMA.
    - window: the length of the moving window (e.g., 5).

    Returns:
    - df: DataFrame with additional TEMA columns.
    """
    df = df.copy()
    
    # Create triangular weights (e.g., [0.2, 0.4, 0.6, 0.8, 1.0] for window=5)
    weights = np.linspace(1, window, window)
    weights /= weights.sum()  # Normalize weights to sum to 1

    for col in columns:
        df[f"{col}_tema{window}"] = df.groupby(id_column)[col].transform(
            lambda x: x.rolling(window).apply(lambda y: np.dot(y, weights) if len(y) == window else np.nan, raw=True)
        )
    
    return df

# Example Usage:
df = pd.DataFrame({
    "date": pd.date_range(start="2024-01-01", periods=10, freq="D").tolist() * 2,  # Two IDs
    "id": ["A"] * 10 + ["B"] * 10,
    "price": [10, 12, 14, 13, 15, 17, 16, 18, 20, 19] * 2,
    "volume": [100, 120, 150, 130, 170, 180, 175, 190, 200, 210] * 2
})

df.set_index(["date", "id"], inplace=True)  # Composite key

# Apply the function for a 5-day triangular EMA
columns_to_apply = ["price", "volume"]
window_size = 5

df_with_tema = create_grouped_triangular_ema(df, "id", columns_to_apply, window_size)

import ace_tools as tools
tools.display_dataframe_to_user(name="DataFrame with Grouped Triangular EMA", dataframe=df_with_tema)
