Voici une explication détaillée ligne par ligne de la fonction approximate_interactions dans shap.utils._general.py.


---

Code source de la fonction

def approximate_interactions(index, shap_values, X):
    inds = np.arange(X.shape[1])  # Crée un tableau contenant les indices des caractéristiques
    inds = inds[inds != index]  # Supprime l'indice de la caractéristique cible (index)

    interaction_strength = np.zeros(X.shape[1] - 1)  # Initialise un tableau pour stocker l'importance des interactions

    for i, ind in enumerate(inds):  # Parcourt toutes les caractéristiques sauf celle ciblée
        interaction_strength[i] = np.abs(np.cov(shap_values[:, index], shap_values[:, ind])[0, 1])  
        # Calcule la covariance entre les valeurs SHAP de la caractéristique cible et celles d'une autre caractéristique
        # Prend la valeur absolue pour mesurer la force de l'interaction

    interaction_inds = np.argsort(-interaction_strength)  # Trie les indices en fonction de l'importance des interactions (ordre décroissant)

    return inds[interaction_inds]  # Retourne les indices des caractéristiques les plus interactives


---

Explication ligne par ligne

1. Création d'une liste d'indices des caractéristiques

inds = np.arange(X.shape[1])

X.shape[1] est le nombre total de caractéristiques dans les données.

np.arange(X.shape[1]) crée un tableau contenant les indices [0, 1, 2, ..., n_features - 1].



2. Suppression de l'indice de la caractéristique cible

inds = inds[inds != index]

Ici, on enlève index, qui est l'indice de la caractéristique cible.

Par exemple, si index = 2 et X.shape[1] = 5, alors inds devient [0, 1, 3, 4].



3. Initialisation du tableau de force d'interaction

interaction_strength = np.zeros(X.shape[1] - 1)

On initialise un tableau pour stocker la force d'interaction entre index et chaque autre caractéristique.

La taille de ce tableau est X.shape[1] - 1 car on a retiré une caractéristique.



4. Boucle pour calculer la force d'interaction

for i, ind in enumerate(inds):

On parcourt les indices des autres caractéristiques (celles qui ne sont pas index).



5. Calcul de la force d'interaction

interaction_strength[i] = np.abs(np.cov(shap_values[:, index], shap_values[:, ind])[0, 1])

shap_values[:, index] : Extrait les valeurs SHAP de la caractéristique cible.

shap_values[:, ind] : Extrait les valeurs SHAP d'une autre caractéristique.

np.cov(...)[0, 1] : Calcule la covariance entre ces deux séries.

np.abs(...) : Prend la valeur absolue de la covariance pour mesurer la force de l'interaction.



6. Tri des indices par force d'interaction décroissante

interaction_inds = np.argsort(-interaction_strength)

np.argsort(-interaction_strength) trie les indices en fonction de la force d'interaction en ordre décroissant.

Le - est utilisé pour inverser l'ordre naturel du tri (qui est croissant par défaut).



7. Retour des indices des caractéristiques les plus interactives

return inds[interaction_inds]

interaction_inds contient les indices triés selon la force d'interaction.

inds[interaction_inds] renvoie ces indices dans l'ordre de leur importance.





---

Exemple d'exécution

Si nous avons ces valeurs SHAP :

Et que nous appelons :

approximate_interactions(0, shap_values, X)

La fonction retournera une liste triée des indices des caractéristiques les plus interactives avec Feature 1.


---

Résumé

Cette fonction cherche à identifier les interactions les plus importantes entre les caractéristiques en analysant la covariance des valeurs SHAP.

Elle exclut la caractéristique cible (index) et calcule la covariance entre ses valeurs SHAP et celles des autres.

Elle trie ensuite ces interactions et retourne les indices correspondants.


C'est une méthode efficace pour détecter quelles caractéristiques influencent conjointement les prédictions d'un modèle de Machine Learning.

